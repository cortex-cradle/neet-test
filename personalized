<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Study Bliss: NEET Dashboard</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&family=Pacifico&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        :root {
            --lavender: #e6e6fa;
            --mint: #b5ead7;
            --baby-pink: #ffd1dc;
            --sky-blue: #87ceeb;
            --gold: #ffd700;
        }
        
        body {
            font-family: 'Inter', sans-serif;
            background: linear-gradient(135deg, #f5f7fa 0%, #e6e6fa 100%);
            min-height: 100vh;
        }
        
        .title-font {
            font-family: 'Pacifico', cursive;
        }
        
        .card {
            background: rgba(255, 255, 255, 0.8);
            backdrop-filter: blur(10px);
            border-radius: 16px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.05);
            transition: all 0.3s ease;
        }
        
        .card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
        }
        
        .float-in {
            animation: floatIn 0.6s ease-out forwards;
            opacity: 0;
            transform: translateY(20px);
        }
        
        @keyframes floatIn {
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }
        
        .streak-glow {
            box-shadow: 0 0 15px rgba(255, 215, 0, 0.5);
        }
        
        .highlight-gold {
            border: 2px solid var(--gold);
            box-shadow: 0 0 10px rgba(255, 215, 0, 0.3);
        }
        
        .completed {
            text-decoration: line-through;
            opacity: 0.7;
        }
        
        .confetti {
            position: fixed;
            width: 10px;
            height: 10px;
            background-color: var(--gold);
            border-radius: 50%;
            animation: confetti-fall 5s linear forwards;
            z-index: 1000;
        }
        
        @keyframes confetti-fall {
            0% {
                transform: translateY(-100px) rotate(0deg);
                opacity: 1;
            }
            100% {
                transform: translateY(100vh) rotate(360deg);
                opacity: 0;
            }
        }
        
        .shine {
            position: relative;
            overflow: hidden;
        }
        
        .shine::after {
            content: '';
            position: absolute;
            top: -50%;
            left: -50%;
            width: 200%;
            height: 200%;
            background: rgba(255, 255, 255, 0.2);
            transform: rotate(30deg);
            transition: all 0.6s;
        }
        
        .shine:hover::after {
            left: 100%;
        }
        
        .calendar-day {
            transition: all 0.2s ease;
            cursor: pointer;
        }
        
        .calendar-day:hover {
            transform: scale(1.1);
        }
        
        .calendar-day.marked {
            background-color: var(--baby-pink);
            border-radius: 50%;
        }
        
        .calendar-day.test {
            background-color: var(--mint);
            border-radius: 50%;
        }
        
        .task-checkbox:checked + span {
            text-decoration: line-through;
            opacity: 0.7;
        }
        
        .task-checkbox:checked + span::before {
            content: 'âœ“';
            color: #10b981;
            font-weight: bold;
            margin-right: 8px;
        }
        
        .delay-100 { animation-delay: 0.1s; }
        .delay-200 { animation-delay: 0.2s; }
        .delay-300 { animation-delay: 0.3s; }
        .delay-400 { animation-delay: 0.4s; }
        .delay-500 { animation-delay: 0.5s; }
        
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            z-index: 1000;
            align-items: center;
            justify-content: center;
        }
        
        .modal-content {
            background-color: white;
            border-radius: 12px;
            padding: 20px;
            width: 90%;
            max-width: 500px;
            max-height: 90vh;
            overflow-y: auto;
        }
        
        .color-option {
            width: 30px;
            height: 30px;
            border-radius: 50%;
            display: inline-block;
            margin-right: 10px;
            cursor: pointer;
            border: 2px solid transparent;
        }
        
        .color-option.active {
            border-color: #333;
        }
        
        .history-item {
            border-left: 3px solid #8b5cf6;
            padding-left: 10px;
            margin-bottom: 10px;
        }
        
        @media (max-width: 768px) {
            .card {
                margin-bottom: 1rem;
            }
            
            .modal-content {
                width: 95%;
                padding: 15px;
            }
        }
    </style>
</head>
<body class="min-h-screen p-4 md:p-6">
    <div class="max-w-6xl mx-auto">
        <!-- Header Section -->
        <header class="text-center mb-8 md:mb-12">
            <h1 class="title-font text-4xl md:text-5xl bg-gradient-to-r from-purple-400 to-pink-400 bg-clip-text text-transparent mb-2 float-in">
                Study Bliss
            </h1>
            <p class="text-gray-600 text-lg md:text-xl">Your Personalized NEET Preparation Dashboard</p>
        </header>

        <!-- Days Counter & Streak -->
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
            <div class="card p-6 text-center float-in">
                <h2 class="text-xl font-semibold text-gray-700 mb-2">Days Until NEET 2026</h2>
                <div id="days-counter" class="text-4xl md:text-5xl font-bold text-purple-600"></div>
                <p class="text-gray-500 mt-2">May 3, 2026</p>
            </div>
            
            <div class="card p-6 text-center float-in delay-100">
                <h2 class="text-xl font-semibold text-gray-700 mb-2">Study Streak</h2>
                <div id="streak-counter" class="text-4xl md:text-5xl font-bold text-pink-500 streak-glow">0</div>
                <div class="text-sm text-gray-500 mb-2" id="last-streak-date"></div>
                <button id="claim-streak" class="mt-2 px-4 py-2 bg-gradient-to-r from-purple-400 to-pink-400 text-white rounded-full font-medium shine transition-all hover:scale-105">
                    Claim Streak
                </button>
            </div>
        </div>

        <!-- Main Content Grid -->
        <div class="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8">
            <!-- Tasks Section -->
            <div class="lg:col-span-2">
                <div class="card p-6 float-in delay-200">
                    <div class="flex justify-between items-center mb-6">
                        <h2 class="text-2xl font-semibold text-gray-800">Today's Study Tasks</h2>
                        <div>
                            <button id="add-task" class="px-3 py-1 bg-green-100 text-green-700 rounded-full text-sm hover:bg-green-200 transition-colors mr-2">
                                <i class="fas fa-plus mr-1"></i> Add Task
                            </button>
                            <button id="edit-tasks" class="px-3 py-1 bg-gray-100 text-gray-700 rounded-full text-sm hover:bg-gray-200 transition-colors">
                                <i class="fas fa-edit mr-1"></i> Edit Tasks
                            </button>
                        </div>
                    </div>
                    
                    <div id="tasks-container" class="space-y-4">
                        <!-- Tasks will be loaded from localStorage -->
                    </div>
                </div>
                
                <!-- Schedule Section -->
                <div class="card p-6 mt-6 float-in delay-300">
                    <div class="flex justify-between items-center mb-6">
                        <h2 class="text-2xl font-semibold text-gray-800">Daily Schedule</h2>
                        <button id="add-schedule" class="px-3 py-1 bg-green-100 text-green-700 rounded-full text-sm hover:bg-green-200 transition-colors">
                            <i class="fas fa-plus mr-1"></i> Add Schedule
                        </button>
                    </div>
                    
                    <div id="schedule-container" class="space-y-4">
                        <!-- Schedule items will be loaded from localStorage -->
                    </div>
                </div>
            </div>
            
            <!-- Sidebar -->
            <div class="space-y-6">
                <!-- Customization Panel -->
                <div class="card p-6 float-in delay-400">
                    <div class="flex justify-between items-center mb-4">
                        <h2 class="text-xl font-semibold text-gray-800">Study Metrics</h2>
                        <div>
                            <button id="view-history" class="px-3 py-1 bg-blue-100 text-blue-700 rounded-full text-sm hover:bg-blue-200 transition-colors mr-2">
                                <i class="fas fa-history mr-1"></i> History
                            </button>
                            <button id="toggle-customization" class="px-3 py-1 bg-gray-100 text-gray-700 rounded-full text-sm hover:bg-gray-200 transition-colors">
                                <i class="fas fa-edit mr-1"></i> Edit
                            </button>
                        </div>
                    </div>
                    
                    <div id="metrics-display" class="space-y-4">
                        <div class="flex justify-between">
                            <span class="text-gray-600">Hours Studied Today:</span>
                            <span id="hours-studied" class="font-medium">0</span>
                        </div>
                        <div class="flex justify-between">
                            <span class="text-gray-600">Phone Usage Today:</span>
                            <span id="phone-usage" class="font-medium">0 hrs</span>
                        </div>
                        <div class="flex justify-between">
                            <span class="text-gray-600">Next Test Date:</span>
                            <span id="next-test" class="font-medium">Not set</span>
                        </div>
                    </div>
                    
                    <div id="customization-panel" class="mt-4 p-4 bg-gray-50 rounded-lg hidden">
                        <div class="space-y-4">
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-1">Hours Studied Today</label>
                                <input type="number" id="studied-input" class="w-full p-2 border border-gray-300 rounded-md" min="0" max="24" step="0.5">
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-1">Hours on Phone Today</label>
                                <input type="number" id="phone-input" class="w-full p-2 border border-gray-300 rounded-md" min="0" max="24" step="0.5">
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-1">Next Test Date</label>
                                <input type="date" id="test-date-input" class="w-full p-2 border border-gray-300 rounded-md">
                            </div>
                            <button id="save-metrics" class="w-full py-2 bg-gradient-to-r from-purple-400 to-pink-400 text-white rounded-md font-medium transition-all hover:scale-105">
                                Save Metrics
                            </button>
                        </div>
                    </div>
                </div>
                
                <!-- Calendar -->
                <div class="card p-6 float-in delay-500">
                    <div class="flex justify-between items-center mb-4">
                        <h2 class="text-xl font-semibold text-gray-800">Study Calendar</h2>
                        <button id="add-calendar-event" class="px-3 py-1 bg-green-100 text-green-700 rounded-full text-sm hover:bg-green-200 transition-colors">
                            <i class="fas fa-plus mr-1"></i> Add Event
                        </button>
                    </div>
                    
                    <div class="mb-4 flex justify-between items-center">
                        <button id="prev-month" class="p-1 rounded-full hover:bg-gray-100 transition-colors">
                            <i class="fas fa-chevron-left text-gray-600"></i>
                        </button>
                        <h3 id="current-month" class="font-medium text-gray-700">October 2023</h3>
                        <button id="next-month" class="p-1 rounded-full hover:bg-gray-100 transition-colors">
                            <i class="fas fa-chevron-right text-gray-600"></i>
                        </button>
                    </div>
                    
                    <div class="grid grid-cols-7 gap-1 text-center text-xs text-gray-500 mb-2">
                        <div>Sun</div><div>Mon</div><div>Tue</div><div>Wed</div><div>Thu</div><div>Fri</div><div>Sat</div>
                    </div>
                    
                    <div id="calendar-grid" class="grid grid-cols-7 gap-1">
                        <!-- Calendar will be generated by JavaScript -->
                    </div>
                    
                    <div class="mt-4 text-xs text-gray-500">
                        <div class="flex items-center mb-1">
                            <div class="w-3 h-3 rounded-full bg-pink-300 mr-2"></div>
                            <span>Study Goals</span>
                        </div>
                        <div class="flex items-center">
                            <div class="w-3 h-3 rounded-full bg-green-300 mr-2"></div>
                            <span>Test Dates</span>
                        </div>
                        <div class="flex items-center">
                            <div class="w-3 h-3 rounded-full bg-blue-300 mr-2"></div>
                            <span>Other Events</span>
                        </div>
                    </div>
                </div>
                
                <!-- Motivational Quote -->
                <div class="card p-6 text-center float-in">
                    <h2 class="text-xl font-semibold text-gray-800 mb-3">Daily Motivation</h2>
                    <p id="motivational-quote" class="text-gray-600 italic">
                        "Success is the sum of small efforts, repeated day in and day out."
                    </p>
                    <p class="mt-2 text-gray-500">- Robert Collier</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Modals -->
    <div id="task-modal" class="modal">
        <div class="modal-content">
            <div class="flex justify-between items-center mb-4">
                <h3 class="text-xl font-semibold" id="task-modal-title">Add New Task</h3>
                <button id="close-task-modal" class="text-gray-500 hover:text-gray-700">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div class="space-y-4">
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1">Task Description</label>
                    <input type="text" id="task-description" class="w-full p-2 border border-gray-300 rounded-md" placeholder="Enter task description">
                </div>
                <div class="flex justify-end space-x-2">
                    <button id="cancel-task" class="px-4 py-2 bg-gray-200 text-gray-700 rounded-md hover:bg-gray-300 transition-colors">Cancel</button>
                    <button id="save-task" class="px-4 py-2 bg-gradient-to-r from-purple-400 to-pink-400 text-white rounded-md font-medium transition-all hover:scale-105">Save Task</button>
                </div>
            </div>
        </div>
    </div>

    <div id="schedule-modal" class="modal">
        <div class="modal-content">
            <div class="flex justify-between items-center mb-4">
                <h3 class="text-xl font-semibold" id="schedule-modal-title">Add Schedule Item</h3>
                <button id="close-schedule-modal" class="text-gray-500 hover:text-gray-700">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div class="space-y-4">
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1">Time</label>
                    <input type="text" id="schedule-time" class="w-full p-2 border border-gray-300 rounded-md" placeholder="e.g., 2:00 - 7:30 PM">
                </div>
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1">Description</label>
                    <input type="text" id="schedule-description" class="w-full p-2 border border-gray-300 rounded-md" placeholder="Enter schedule description">
                </div>
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1">Type</label>
                    <select id="schedule-type" class="w-full p-2 border border-gray-300 rounded-md">
                        <option value="default">Default</option>
                        <option value="pw-coaching">PW Coaching</option>
                        <option value="chat-slot">Chat Slot</option>
                        <option value="self-study">Self Study</option>
                        <option value="revision">Revision</option>
                    </select>
                </div>
                <div class="flex justify-end space-x-2">
                    <button id="cancel-schedule" class="px-4 py-2 bg-gray-200 text-gray-700 rounded-md hover:bg-gray-300 transition-colors">Cancel</button>
                    <button id="save-schedule" class="px-4 py-2 bg-gradient-to-r from-purple-400 to-pink-400 text-white rounded-md font-medium transition-all hover:scale-105">Save Schedule</button>
                </div>
            </div>
        </div>
    </div>

    <div id="calendar-modal" class="modal">
        <div class="modal-content">
            <div class="flex justify-between items-center mb-4">
                <h3 class="text-xl font-semibold">Add Calendar Event</h3>
                <button id="close-calendar-modal" class="text-gray-500 hover:text-gray-700">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div class="space-y-4">
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1">Date</label>
                    <input type="date" id="event-date" class="w-full p-2 border border-gray-300 rounded-md">
                </div>
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1">Description</label>
                    <input type="text" id="event-description" class="w-full p-2 border border-gray-300 rounded-md" placeholder="Enter event description">
                </div>
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1">Event Type</label>
                    <div class="flex space-x-2 mt-2">
                        <div class="color-option bg-pink-300 active" data-color="pink" data-type="study"></div>
                        <div class="color-option bg-green-300" data-color="green" data-type="test"></div>
                        <div class="color-option bg-blue-300" data-color="blue" data-type="other"></div>
                    </div>
                </div>
                <div class="flex justify-end space-x-2">
                    <button id="cancel-calendar" class="px-4 py-2 bg-gray-200 text-gray-700 rounded-md hover:bg-gray-300 transition-colors">Cancel</button>
                    <button id="save-calendar" class="px-4 py-2 bg-gradient-to-r from-purple-400 to-pink-400 text-white rounded-md font-medium transition-all hover:scale-105">Save Event</button>
                </div>
            </div>
        </div>
    </div>

    <div id="history-modal" class="modal">
        <div class="modal-content">
            <div class="flex justify-between items-center mb-4">
                <h3 class="text-xl font-semibold">Study History</h3>
                <button id="close-history-modal" class="text-gray-500 hover:text-gray-700">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div id="history-container" class="max-h-96 overflow-y-auto">
                <!-- History items will be loaded here -->
            </div>
        </div>
    </div>

    <script>
        // Days Counter Calculation
        function updateDaysCounter() {
            const neetDate = new Date('May 3, 2026');
            const today = new Date();
            const timeDiff = neetDate.getTime() - today.getTime();
            const daysLeft = Math.ceil(timeDiff / (1000 * 3600 * 24));
            document.getElementById('days-counter').textContent = daysLeft;
        }
        
        // Streak Counter with localStorage
        function initializeStreakCounter() {
            const streakElement = document.getElementById('streak-counter');
            const lastStreakDateElement = document.getElementById('last-streak-date');
            let streakData = JSON.parse(localStorage.getItem('neetStreak')) || { streak: 0, lastClaim: null };
            
            streakElement.textContent = streakData.streak;
            
            if (streakData.lastClaim) {
                const lastClaimDate = new Date(streakData.lastClaim);
                lastStreakDateElement.textContent = `Last claimed: ${formatDate(lastClaimDate)}`;
            }
            
            document.getElementById('claim-streak').addEventListener('click', function() {
                const today = new Date().toDateString();
                const lastClaim = streakData.lastClaim ? new Date(streakData.lastClaim).toDateString() : null;
                
                // Check if streak was already claimed today
                if (lastClaim === today) {
                    showNotification('Streak already claimed today!', 'error');
                    return;
                }
                
                // Check if all tasks are completed
                const allChecked = Array.from(document.querySelectorAll('.task-checkbox')).every(checkbox => checkbox.checked);
                
                if (allChecked) {
                    // Check if this is a consecutive day
                    const yesterday = new Date();
                    yesterday.setDate(yesterday.getDate() - 1);
                    
                    if (lastClaim === yesterday.toDateString() || lastClaim === null) {
                        streakData.streak++;
                    } else {
                        streakData.streak = 1; // Reset streak if not consecutive
                    }
                    
                    streakData.lastClaim = new Date().toISOString();
                    localStorage.setItem('neetStreak', JSON.stringify(streakData));
                    
                    streakElement.textContent = streakData.streak;
                    lastStreakDateElement.textContent = `Last claimed: ${formatDate(new Date())}`;
                    
                    // Add confetti animation
                    createConfetti();
                    
                    // Show success message
                    showNotification('Streak updated! Keep up the great work!', 'success');
                    
                    // Save today's metrics to history
                    saveDailyHistory();
                } else {
                    showNotification('Complete all tasks to claim your streak!', 'error');
                }
            });
        }
        
        // Task Management
        function initializeTaskManager() {
            let tasks = JSON.parse(localStorage.getItem('neetTasks')) || [
                { id: 1, text: "Complete Physics Chapter: Electrostatics", completed: false },
                { id: 2, text: "Solve 30 Biology MCQs from NCERT", completed: false },
                { id: 3, text: "Revise Organic Chemistry Reactions", completed: false },
                { id: 4, text: "Practice Physics Numerical Problems", completed: false },
                { id: 5, text: "Read Human Physiology Notes", completed: false }
            ];
            
            function renderTasks() {
                const container = document.getElementById('tasks-container');
                container.innerHTML = '';
                
                tasks.forEach(task => {
                    const taskElement = document.createElement('div');
                    taskElement.className = 'flex items-center p-3 bg-white rounded-lg border border-gray-100 hover:shadow-md transition-all';
                    taskElement.innerHTML = `
                        <input type="checkbox" class="task-checkbox h-5 w-5 text-green-500 rounded focus:ring-green-400" ${task.completed ? 'checked' : ''} data-id="${task.id}">
                        <span class="ml-3 text-gray-700 flex-grow">${task.text}</span>
                        <button class="edit-task text-blue-500 hover:text-blue-700 ml-2" data-id="${task.id}">
                            <i class="fas fa-edit"></i>
                        </button>
                        <button class="delete-task text-red-500 hover:text-red-700 ml-2" data-id="${task.id}">
                            <i class="fas fa-trash"></i>
                        </button>
                    `;
                    container.appendChild(taskElement);
                });
                
                // Add event listeners
                document.querySelectorAll('.task-checkbox').forEach(checkbox => {
                    checkbox.addEventListener('change', function() {
                        const taskId = parseInt(this.getAttribute('data-id'));
                        const task = tasks.find(t => t.id === taskId);
                        if (task) {
                            task.completed = this.checked;
                            localStorage.setItem('neetTasks', JSON.stringify(tasks));
                            
                            if (this.checked) {
                                const label = this.nextElementSibling;
                                label.classList.add('completed');
                                
                                // Add shine effect
                                const taskItem = this.closest('.flex');
                                taskItem.classList.add('shine');
                                setTimeout(() => {
                                    taskItem.classList.remove('shine');
                                }, 600);
                            } else {
                                this.nextElementSibling.classList.remove('completed');
                            }
                        }
                    });
                });
                
                document.querySelectorAll('.edit-task').forEach(button => {
                    button.addEventListener('click', function() {
                        const taskId = parseInt(this.getAttribute('data-id'));
                        const task = tasks.find(t => t.id === taskId);
                        if (task) {
                            openTaskModal(task);
                        }
                    });
                });
                
                document.querySelectorAll('.delete-task').forEach(button => {
                    button.addEventListener('click', function() {
                        const taskId = parseInt(this.getAttribute('data-id'));
                        tasks = tasks.filter(t => t.id !== taskId);
                        localStorage.setItem('neetTasks', JSON.stringify(tasks));
                        renderTasks();
                        showNotification('Task deleted successfully!', 'success');
                    });
                });
            }
            
            function openTaskModal(task = null) {
                const modal = document.getElementById('task-modal');
                const title = document.getElementById('task-modal-title');
                const description = document.getElementById('task-description');
                
                if (task) {
                    title.textContent = 'Edit Task';
                    description.value = task.text;
                    modal.currentTaskId = task.id;
                } else {
                    title.textContent = 'Add New Task';
                    description.value = '';
                    modal.currentTaskId = null;
                }
                
                modal.style.display = 'flex';
            }
            
            function saveTask() {
                const modal = document.getElementById('task-modal');
                const description = document.getElementById('task-description').value.trim();
                
                if (!description) {
                    showNotification('Please enter a task description!', 'error');
                    return;
                }
                
                if (modal.currentTaskId) {
                    // Editing existing task
                    const task = tasks.find(t => t.id === modal.currentTaskId);
                    if (task) {
                        task.text = description;
                    }
                } else {
                    // Adding new task
                    const newId = tasks.length > 0 ? Math.max(...tasks.map(t => t.id)) + 1 : 1;
                    tasks.push({
                        id: newId,
                        text: description,
                        completed: false
                    });
                }
                
                localStorage.setItem('neetTasks', JSON.stringify(tasks));
                renderTasks();
                modal.style.display = 'none';
                showNotification('Task saved successfully!', 'success');
            }
            
            // Event listeners for task modal
            document.getElementById('add-task').addEventListener('click', () => openTaskModal());
            document.getElementById('edit-tasks').addEventListener('click', () => {
                if (tasks.length === 0) {
                    showNotification('No tasks to edit!', 'error');
                } else {
                    openTaskModal();
                }
            });
            document.getElementById('close-task-modal').addEventListener('click', () => {
                document.getElementById('task-modal').style.display = 'none';
            });
            document.getElementById('cancel-task').addEventListener('click', () => {
                document.getElementById('task-modal').style.display = 'none';
            });
            document.getElementById('save-task').addEventListener('click', saveTask);
            
            // Initial render
            renderTasks();
        }
        
        // Schedule Management
        function initializeScheduleManager() {
            let scheduleItems = JSON.parse(localStorage.getItem('neetSchedule')) || [
                { id: 1, time: "8:00 - 9:00 AM", description: "Morning Revision & Doubt Clearing", type: "chat-slot" },
                { id: 2, time: "9:00 AM - 12:00 PM", description: "Physics Concepts & Problems", type: "self-study" },
                { id: 3, time: "2:00 - 7:30 PM", description: "Live Classes & Problem Solving", type: "pw-coaching" },
                { id: 4, time: "8:00 - 9:30 PM", description: "Biology Diagrams & Terminology", type: "revision" },
                { id: 5, time: "10:00 - 11:00 PM", description: "Evening Doubt Session", type: "chat-slot" }
            ];
            
            function renderSchedule() {
                const container = document.getElementById('schedule-container');
                container.innerHTML = '';
                
                scheduleItems.forEach(item => {
                    const scheduleElement = document.createElement('div');
                    let highlightClass = '';
                    let typeBadge = '';
                    
                    if (item.type === 'pw-coaching' || item.type === 'chat-slot') {
                        highlightClass = 'highlight-gold';
                    }
                    
                    // Set badge based on type
                    switch(item.type) {
                        case 'pw-coaching':
                            typeBadge = '<span class="px-2 py-1 bg-yellow-100 text-yellow-700 rounded-full text-xs">PW Coaching</span>';
                            break;
                        case 'chat-slot':
                            typeBadge = '<span class="px-2 py-1 bg-blue-100 text-blue-700 rounded-full text-xs">Chat Slot</span>';
                            break;
                        case 'self-study':
                            typeBadge = '<span class="px-2 py-1 bg-green-100 text-green-700 rounded-full text-xs">Self Study</span>';
                            break;
                        case 'revision':
                            typeBadge = '<span class="px-2 py-1 bg-purple-100 text-purple-700 rounded-full text-xs">Revision</span>';
                            break;
                        default:
                            typeBadge = '<span class="px-2 py-1 bg-gray-100 text-gray-700 rounded-full text-xs">Default</span>';
                    }
                    
                    scheduleElement.className = `p-3 bg-white rounded-lg border border-gray-100 ${highlightClass}`;
                    scheduleElement.innerHTML = `
                        <div class="flex justify-between">
                            <span class="font-medium text-gray-700">${item.time}</span>
                            ${typeBadge}
                        </div>
                        <p class="text-gray-600 mt-1">${item.description}</p>
                        <div class="mt-2 flex justify-end space-x-2">
                            <button class="edit-schedule text-blue-500 hover:text-blue-700 text-sm" data-id="${item.id}">
                                <i class="fas fa-edit mr-1"></i> Edit
                            </button>
                            <button class="delete-schedule text-red-500 hover:text-red-700 text-sm" data-id="${item.id}">
                                <i class="fas fa-trash mr-1"></i> Delete
                            </button>
                        </div>
                    `;
                    container.appendChild(scheduleElement);
                });
                
                // Add event listeners
                document.querySelectorAll('.edit-schedule').forEach(button => {
                    button.addEventListener('click', function() {
                        const itemId = parseInt(this.getAttribute('data-id'));
                        const item = scheduleItems.find(i => i.id === itemId);
                        if (item) {
                            openScheduleModal(item);
                        }
                    });
                });
                
                document.querySelectorAll('.delete-schedule').forEach(button => {
                    button.addEventListener('click', function() {
                        const itemId = parseInt(this.getAttribute('data-id'));
                        scheduleItems = scheduleItems.filter(i => i.id !== itemId);
                        localStorage.setItem('neetSchedule', JSON.stringify(scheduleItems));
                        renderSchedule();
                        showNotification('Schedule item deleted successfully!', 'success');
                    });
                });
            }
            
            function openScheduleModal(item = null) {
                const modal = document.getElementById('schedule-modal');
                const title = document.getElementById('schedule-modal-title');
                const time = document.getElementById('schedule-time');
                const description = document.getElementById('schedule-description');
                const type = document.getElementById('schedule-type');
                
                if (item) {
                    title.textContent = 'Edit Schedule Item';
                    time.value = item.time;
                    description.value = item.description;
                    type.value = item.type;
                    modal.currentItemId = item.id;
                } else {
                    title.textContent = 'Add Schedule Item';
                    time.value = '';
                    description.value = '';
                    type.value = 'default';
                    modal.currentItemId = null;
                }
                
                modal.style.display = 'flex';
            }
            
            function saveSchedule() {
                const modal = document.getElementById('schedule-modal');
                const time = document.getElementById('schedule-time').value.trim();
                const description = document.getElementById('schedule-description').value.trim();
                const type = document.getElementById('schedule-type').value;
                
                if (!time || !description) {
                    showNotification('Please fill in all fields!', 'error');
                    return;
                }
                
                if (modal.currentItemId) {
                    // Editing existing item
                    const item = scheduleItems.find(i => i.id === modal.currentItemId);
                    if (item) {
                        item.time = time;
                        item.description = description;
                        item.type = type;
                    }
                } else {
                    // Adding new item
                    const newId = scheduleItems.length > 0 ? Math.max(...scheduleItems.map(i => i.id)) + 1 : 1;
                    scheduleItems.push({
                        id: newId,
                        time: time,
                        description: description,
                        type: type
                    });
                }
                
                localStorage.setItem('neetSchedule', JSON.stringify(scheduleItems));
                renderSchedule();
                modal.style.display = 'none';
                showNotification('Schedule item saved successfully!', 'success');
            }
            
            // Event listeners for schedule modal
            document.getElementById('add-schedule').addEventListener('click', () => openScheduleModal());
            document.getElementById('close-schedule-modal').addEventListener('click', () => {
                document.getElementById('schedule-modal').style.display = 'none';
            });
            document.getElementById('cancel-schedule').addEventListener('click', () => {
                document.getElementById('schedule-modal').style.display = 'none';
            });
            document.getElementById('save-schedule').addEventListener('click', saveSchedule);
            
            // Initial render
            renderSchedule();
        }
        
        // Customization Panel
        function setupCustomizationPanel() {
            const toggleBtn = document.getElementById('toggle-customization');
            const panel = document.getElementById('customization-panel');
            const saveBtn = document.getElementById('save-metrics');
            
            // Load saved metrics
            const savedMetrics = JSON.parse(localStorage.getItem('neetMetrics') || '{}');
            if (savedMetrics.hoursStudied) {
                document.getElementById('hours-studied').textContent = savedMetrics.hoursStudied;
                document.getElementById('studied-input').value = savedMetrics.hoursStudied;
            }
            if (savedMetrics.phoneUsage) {
                document.getElementById('phone-usage').textContent = savedMetrics.phoneUsage + ' hrs';
                document.getElementById('phone-input').value = savedMetrics.phoneUsage;
            }
            if (savedMetrics.nextTest) {
                document.getElementById('next-test').textContent = formatDate(new Date(savedMetrics.nextTest));
                document.getElementById('test-date-input').value = savedMetrics.nextTest;
            }
            
            toggleBtn.addEventListener('click', function() {
                panel.classList.toggle('hidden');
                toggleBtn.innerHTML = panel.classList.contains('hidden') ? 
                    '<i class="fas fa-edit mr-1"></i> Edit' : 
                    '<i class="fas fa-times mr-1"></i> Cancel';
            });
            
            saveBtn.addEventListener('click', function() {
                const hoursStudied = document.getElementById('studied-input').value;
                const phoneUsage = document.getElementById('phone-input').value;
                const nextTest = document.getElementById('test-date-input').value;
                
                // Save to localStorage
                const metrics = {
                    hoursStudied: hoursStudied,
                    phoneUsage: phoneUsage,
                    nextTest: nextTest
                };
                localStorage.setItem('neetMetrics', JSON.stringify(metrics));
                
                // Update display
                document.getElementById('hours-studied').textContent = hoursStudied || '0';
                document.getElementById('phone-usage').textContent = (phoneUsage || '0') + ' hrs';
                document.getElementById('next-test').textContent = nextTest ? formatDate(new Date(nextTest)) : 'Not set';
                
                // Hide panel
                panel.classList.add('hidden');
                toggleBtn.innerHTML = '<i class="fas fa-edit mr-1"></i> Edit';
                
                showNotification('Metrics saved successfully!', 'success');
            });
        }
        
        // Calendar Implementation
        function initializeCalendar() {
            let currentDate = new Date();
            let calendarEvents = JSON.parse(localStorage.getItem('neetCalendar')) || [
                { date: '2023-10-15', description: 'Complete Physics Revision', type: 'study', color: 'pink' },
                { date: '2023-10-22', description: 'Full Mock Test', type: 'test', color: 'green' },
                { date: '2023-10-28', description: 'Biology Test', type: 'test', color: 'green' }
            ];
            
            function renderCalendar() {
                const calendarGrid = document.getElementById('calendar-grid');
                const monthYear = document.getElementById('current-month');
                
                // Clear previous calendar
                calendarGrid.innerHTML = '';
                
                // Set month/year header
                monthYear.textContent = currentDate.toLocaleDateString('en-US', { month: 'long', year: 'numeric' });
                
                // Get first day of month and number of days
                const firstDay = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);
                const lastDay = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0);
                const daysInMonth = lastDay.getDate();
                
                // Add empty cells for days before the first day of the month
                for (let i = 0; i < firstDay.getDay(); i++) {
                    const emptyCell = document.createElement('div');
                    emptyCell.className = 'h-8';
                    calendarGrid.appendChild(emptyCell);
                }
                
                // Add days of the month
                for (let day = 1; day <= daysInMonth; day++) {
                    const dayElement = document.createElement('div');
                    dayElement.className = 'h-8 flex items-center justify-center text-sm calendar-day';
                    dayElement.textContent = day;
                    
                    // Format date for comparison
                    const dateStr = `${currentDate.getFullYear()}-${(currentDate.getMonth() + 1).toString().padStart(2, '0')}-${day.toString().padStart(2, '0')}`;
                    
                    // Check if this date has events
                    const eventsForDay = calendarEvents.filter(event => event.date === dateStr);
                    
                    if (eventsForDay.length > 0) {
                        // Use the first event's type for coloring
                        const eventType = eventsForDay[0].type;
                        if (eventType === 'study') {
                            dayElement.classList.add('marked');
                        } else if (eventType === 'test') {
                            dayElement.classList.add('test');
                        } else {
                            dayElement.style.backgroundColor = '#b5e0f2'; // Light blue for other events
                            dayElement.style.borderRadius = '50%';
                        }
                        
                        // Add tooltip with event descriptions
                        const tooltipText = eventsForDay.map(event => event.description).join(', ');
                        dayElement.title = tooltipText;
                    }
                    
                    // Highlight today
                    const today = new Date();
                    if (currentDate.getMonth() === today.getMonth() && 
                        currentDate.getFullYear() === today.getFullYear() && 
                        day === today.getDate()) {
                        dayElement.classList.add('bg-blue-100', 'font-medium');
                    }
                    
                    // Add click event to view/edit events for this day
                    dayElement.addEventListener('click', () => {
                        viewDayEvents(dateStr, eventsForDay);
                    });
                    
                    calendarGrid.appendChild(dayElement);
                }
            }
            
            function viewDayEvents(dateStr, events) {
                const modal = document.getElementById('calendar-modal');
                const dateInput = document.getElementById('event-date');
                const descriptionInput = document.getElementById('event-description');
                
                // Set the date
                dateInput.value = dateStr;
                
                // Clear previous color selections
                document.querySelectorAll('.color-option').forEach(option => {
                    option.classList.remove('active');
                });
                
                // Set default color
                document.querySelector('.color-option[data-color="pink"]').classList.add('active');
                
                // If there are events, show the first one for editing
                if (events.length > 0) {
                    const firstEvent = events[0];
                    descriptionInput.value = firstEvent.description;
                    
                    // Set the color
                    document.querySelector(`.color-option[data-color="${firstEvent.color}"]`).classList.add('active');
                    
                    // Store the event ID for editing
                    modal.currentEventId = firstEvent.id;
                } else {
                    descriptionInput.value = '';
                    modal.currentEventId = null;
                }
                
                modal.style.display = 'flex';
            }
            
            function saveCalendarEvent() {
                const modal = document.getElementById('calendar-modal');
                const date = document.getElementById('event-date').value;
                const description = document.getElementById('event-description').value.trim();
                const activeColor = document.querySelector('.color-option.active');
                const color = activeColor.getAttribute('data-color');
                const type = activeColor.getAttribute('data-type');
                
                if (!date || !description) {
                    showNotification('Please fill in all fields!', 'error');
                    return;
                }
                
                // Check if we're editing an existing event
                if (modal.currentEventId) {
                    const eventIndex = calendarEvents.findIndex(e => e.id === modal.currentEventId);
                    if (eventIndex !== -1) {
                        calendarEvents[eventIndex] = {
                            ...calendarEvents[eventIndex],
                            date: date,
                            description: description,
                            type: type,
                            color: color
                        };
                    }
                } else {
                    // Adding new event
                    const newId = calendarEvents.length > 0 ? Math.max(...calendarEvents.map(e => e.id)) + 1 : 1;
                    calendarEvents.push({
                        id: newId,
                        date: date,
                        description: description,
                        type: type,
                        color: color
                    });
                }
                
                localStorage.setItem('neetCalendar', JSON.stringify(calendarEvents));
                renderCalendar();
                modal.style.display = 'none';
                showNotification('Calendar event saved successfully!', 'success');
            }
            
            // Color selection
            document.querySelectorAll('.color-option').forEach(option => {
                option.addEventListener('click', function() {
                    document.querySelectorAll('.color-option').forEach(opt => {
                        opt.classList.remove('active');
                    });
                    this.classList.add('active');
                });
            });
            
            // Navigation buttons
            document.getElementById('prev-month').addEventListener('click', function() {
                currentDate.setMonth(currentDate.getMonth() - 1);
                renderCalendar();
            });
            
            document.getElementById('next-month').addEventListener('click', function() {
                currentDate.setMonth(currentDate.getMonth() + 1);
                renderCalendar();
            });
            
            // Event listeners for calendar modal
            document.getElementById('add-calendar-event').addEventListener('click', () => {
                const today = new Date();
                const dateStr = `${today.getFullYear()}-${(today.getMonth() + 1).toString().padStart(2, '0')}-${today.getDate().toString().padStart(2, '0')}`;
                viewDayEvents(dateStr, []);
            });
            
            document.getElementById('close-calendar-modal').addEventListener('click', () => {
                document.getElementById('calendar-modal').style.display = 'none';
            });
            
            document.getElementById('cancel-calendar').addEventListener('click', () => {
                document.getElementById('calendar-modal').style.display = 'none';
            });
            
            document.getElementById('save-calendar').addEventListener('click', saveCalendarEvent);
            
            // Initial render
            renderCalendar();
        }
        
        // History Management
        function initializeHistoryManager() {
            function renderHistory() {
                const container = document.getElementById('history-container');
                container.innerHTML = '';
                
                const history = JSON.parse(localStorage.getItem('neetHistory')) || [];
                
                if (history.length === 0) {
                    container.innerHTML = '<p class="text-gray-500 text-center py-4">No history data available yet.</p>';
                    return;
                }
                
                // Sort history by date (newest first)
                history.sort((a, b) => new Date(b.date) - new Date(a.date));
                
                history.forEach(entry => {
                    const historyItem = document.createElement('div');
                    historyItem.className = 'history-item';
                    historyItem.innerHTML = `
                        <div class="font-medium text-gray-800">${formatDate(new Date(entry.date))}</div>
                        <div class="text-sm text-gray-600 mt-1">
                            <div>Studied: ${entry.hoursStudied || 0} hours</div>
                            <div>Phone usage: ${entry.phoneUsage || 0} hours</div>
                            <div>Tasks completed: ${entry.tasksCompleted || 0}/${entry.totalTasks || 0}</div>
                        </div>
                    `;
                    container.appendChild(historyItem);
                });
            }
            
            function saveDailyHistory() {
                const today = new Date().toDateString();
                const history = JSON.parse(localStorage.getItem('neetHistory')) || [];
                
                // Check if we already have an entry for today
                const existingIndex = history.findIndex(entry => new Date(entry.date).toDateString() === today);
                
                const tasks = JSON.parse(localStorage.getItem('neetTasks')) || [];
                const completedTasks = tasks.filter(task => task.completed).length;
                const totalTasks = tasks.length;
                
                const metrics = JSON.parse(localStorage.getItem('neetMetrics')) || {};
                
                const historyEntry = {
                    date: new Date().toISOString(),
                    hoursStudied: metrics.hoursStudied || 0,
                    phoneUsage: metrics.phoneUsage || 0,
                    tasksCompleted: completedTasks,
                    totalTasks: totalTasks
                };
                
                if (existingIndex !== -1) {
                    // Update existing entry
                    history[existingIndex] = historyEntry;
                } else {
                    // Add new entry
                    history.push(historyEntry);
                }
                
                localStorage.setItem('neetHistory', JSON.stringify(history));
            }
            
            // Event listeners for history modal
            document.getElementById('view-history').addEventListener('click', () => {
                renderHistory();
                document.getElementById('history-modal').style.display = 'flex';
            });
            
            document.getElementById('close-history-modal').addEventListener('click', () => {
                document.getElementById('history-modal').style.display = 'none';
            });
            
            // Initial render (if modal is open)
            renderHistory();
        }
        
        // Helper Functions
        function formatDate(date) {
            return date.toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' });
        }
        
        function createConfetti() {
            const colors = ['#ffd700', '#ff6b6b', '#4ecdc4', '#45b7d1', '#96ceb4', '#f9a1bc'];
            
            for (let i = 0; i < 100; i++) {
                const confetti = document.createElement('div');
                confetti.className = 'confetti';
                confetti.style.left = Math.random() * 100 + 'vw';
                confetti.style.backgroundColor = colors[Math.floor(Math.random() * colors.length)];
                confetti.style.width = Math.random() * 10 + 5 + 'px';
                confetti.style.height = confetti.style.width;
                confetti.style.animationDuration = Math.random() * 3 + 2 + 's';
                
                document.body.appendChild(confetti);
                
                setTimeout(() => {
                    confetti.remove();
                }, 5000);
            }
        }
        
        function showNotification(message, type) {
            // Create notification element
            const notification = document.createElement('div');
            notification.className = `fixed top-4 right-4 p-4 rounded-lg shadow-lg z-50 transform transition-transform duration-300 ${
                type === 'success' ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'
            }`;
            notification.textContent = message;
            
            document.body.appendChild(notification);
            
            // Remove after 3 seconds
            setTimeout(() => {
                notification.style.transform = 'translateX(100%)';
                setTimeout(() => {
                    notification.remove();
                }, 300);
            }, 3000);
        }
        
        // Initialize everything when DOM is loaded
        document.addEventListener('DOMContentLoaded', function() {
            updateDaysCounter();
            initializeStreakCounter();
            initializeTaskManager();
            initializeScheduleManager();
            setupCustomizationPanel();
            initializeCalendar();
            initializeHistoryManager();
            
            // Add float-in animation delays
            document.querySelectorAll('.float-in').forEach((el, index) => {
                el.style.animationDelay = `${index * 0.1}s`;
            });
            
            // Close modals when clicking outside
            window.addEventListener('click', function(event) {
                const modals = document.querySelectorAll('.modal');
                modals.forEach(modal => {
                    if (event.target === modal) {
                        modal.style.display = 'none';
                    }
                });
            });
        });
    </script>
</body>
</html>
